# Copyright 2017 Gentoo Foundation
# Distributed under the terms of the GNU GPL version 2 or later

DESCRIPTION="Manage the gitlab-gitaly slot symlink(s)"
MAINTAINER="prote@fmi.uni-stuttgart.de"
VERSION="@VERSION@"

# find a list of gitlab-gitaly installations
find_targets() {
    local f
    for f in "${EROOT}"/opt/gitlab/gitlab-gitaly-[[:digit:]]*; do
        basename "${f}"
    done
}

# remove the gitlab-gitaly symlink
remove_symlink() {
    rm "${EROOT}/opt/gitlab/gitlab-gitaly" || \
        die "failed to remove /opt/gitlab/gitlab-gitaly symlink"
    # openrc:
    rm -f "${EROOT}/etc/init.d/gitlab-gitaly"
}

# set the gitlab-gitaly symlinks
set_symlink() {
    local target=$1

    if is_number "${target}"; then
        local targets=( $(find_targets) )
        target=${targets[target-1]}
    fi

    [[ -z ${target} || ! -d ${EROOT}/opt/gitlab/${target} ]] \
        && die -q "Target \"$1\" doesn't appear to be valid!"

    ln -s "${target}" "${EROOT}/opt/gitlab/gitlab-gitaly" || \
        die -q "Failed to create /opt/gitlab/gitlab-gitaly symlink!"

    # Optional openrc symlink:
    if [ -x "${EROOT}/etc/init.d/${target}" ]; then
        ln -s "${target}" "${EROOT}/etc/init.d/gitlab-gitaly"
    fi
}

### show action ###

describe_show() {
    echo "Show the current gitlab-gitaly symlink"
}

do_show() {
    write_list_start "Current gitlab-gitaly symlink:"
    if [[ -L ${EROOT}/opt/gitlab/gitlab-gitaly ]]; then
        local gitaly=$(canonicalise "${EROOT}/opt/gitlab/gitlab-gitaly")
        write_kv_list_entry "${gitaly%/}" ""
    else
        write_kv_list_entry "(unset)" ""
    fi
}

### list action ###

describe_list() {
    echo "List available gitlab-gitaly symlink targets"
}

do_list() {
    local i targets=( $(find_targets) )

    write_list_start "Available gitlab-gitaly symlink targets:"
    for (( i = 0; i < ${#targets[@]}; i++ )); do
        # highlight the target where the symlink is pointing to
        [[ ${targets[i]} = \
            $(basename "$(canonicalise "${EROOT}/opt/gitlab/gitlab-gitaly")") ]] \
            && targets[i]=$(highlight_marker "${targets[i]}")
    done
    write_numbered_list -m "(none found)" "${targets[@]}"
}

### set action ###

describe_set() {
    echo "Set a new gitlab-gitaly symlink target"
}

describe_set_parameters() {
    echo "<target>"
}

describe_set_options() {
    echo "target : Target name or number (from 'list' action)"
}

do_set() {
    local old_version
    [[ -z $1 ]] && die -q "You didn't tell me what to set the symlink to"
    [[ $# -gt 1 ]] && die -q "Too many parameters"

    if [[ -L ${EROOT}/opt/gitlab/gitlab-gitaly ]]; then
        # existing symlink
		old_version=$(basename $(readlink -f ${EROOT}/opt/gitlab/gitlab-gitaly))
        remove_symlink || die -q "Couldn't remove existing symlink"
        set_symlink "$1" || die -q "Couldn't set a new symlink"
        echo "You may now clean up the old slot by running:"
        echo "  emerge -C dev-vcs/${old_version}"
    elif [[ -e ${EROOT}/opt/gitlab/gitlab-gitaly ]]; then
        # we have something strange
        die -q "${EROOT}/opt/gitlab/gitlab-gitaly exists but is not a symlink"
    else
        set_symlink "$1" || die -q "Couldn't set a new symlink"
    fi
}

### unset action ###

describe_unset() {
    echo "Unset the gitlab-gitaly symlink target"
}

do_unset() {
    if [[ -L ${EROOT}/opt/gitlab/gitlab-gitaly ]]; then
        remove_symlink
    elif [[ -e ${EROOT}/opt/gitlab/gitlab-gitaly ]]; then
        die -q "${EROOT}/opt/gitlab/gitlab-gitaly exists but is not a symlink"
    else
        echo "No active gitlab-gitaly exists"
    fi
}
